{"version":3,"sources":["webpack:///src/app/pages/task-view/task-view.component.ts","webpack:///src/app/pages/task-view/task-view.component.html","webpack:///src/app/pages/login-page/login-page.component.ts","webpack:///src/app/pages/login-page/login-page.component.html","webpack:///src/app/pages/new-task/new-task.component.ts","webpack:///src/app/pages/new-task/new-task.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/task.service.ts","webpack:///src/app/pages/edit-list/edit-list.component.ts","webpack:///src/app/pages/edit-list/edit-list.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/pages/signup-page/signup-page.component.ts","webpack:///src/app/pages/signup-page/signup-page.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth.service.ts","webpack:///src/app/web-req.interceptor.ts","webpack:///src/app/web-request.service.ts","webpack:///src/app/pages/edit-task/edit-task.component.ts","webpack:///src/app/pages/edit-task/edit-task.component.html","webpack:///src/app/pages/new-list/new-list.component.ts","webpack:///src/app/pages/new-list/new-list.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["TaskViewComponent","taskService","route","router","params","subscribe","listId","selectedListId","getTasks","tasks","undefined","getLists","lists","task","complete","console","log","completed","deleteList","res","navigate","id","deleteTask","filter","val","_id","LoginPageComponent","authService","email","password","login","status","onLoginButtonClicked","NewTaskComponent","title","createTask","newTask","relativeTo","environment","production","TaskService","webReqService","get","post","patch","taskId","_listId","EditListComponent","updateList","AppComponent","SignupPageComponent","signup","onSignupButtonClicked","AppModule","provide","useClass","multi","AuthService","webService","http","pipe","setSession","body","headers","removeSession","localStorage","getItem","accessToken","setItem","userId","refreshToken","removeItem","ROOT_URL","getRefreshToken","getUserId","observe","setAccessToken","WebReqInterceptor","accessTokenRefreshed","request","next","addAuthHeader","handle","error","refreshAccessToken","err","logout","refreshingAccessToken","observer","getNewAccessToken","token","getAccessToken","clone","setHeaders","WebRequestService","uri","payload","EditTaskComponent","updateTask","NewListComponent","createList","list","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","relativeLinkResolution","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { TaskService } from 'src/app/task.service';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { Task } from 'src/app/models/task.model';\r\nimport { List } from 'src/app/models/list.model';\r\n\r\n@Component({\r\n  selector: 'app-task-view',\r\n  templateUrl: './task-view.component.html',\r\n  styleUrls: ['./task-view.component.scss']\r\n})\r\nexport class TaskViewComponent implements OnInit {\r\n\r\n  lists: List[];\r\n  tasks: Task[];\r\n\r\n  selectedListId: string;\r\n\r\n  constructor(private taskService: TaskService, private route: ActivatedRoute, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe(\r\n      (params: Params) => {\r\n        if (params.listId) {\r\n          this.selectedListId = params.listId;\r\n          this.taskService.getTasks(params.listId).subscribe((tasks: Task[]) => {\r\n            this.tasks = tasks;\r\n          })\r\n        } else {\r\n          this.tasks = undefined;\r\n        }\r\n      }\r\n    )\r\n\r\n    this.taskService.getLists().subscribe((lists: List[]) => {\r\n      this.lists = lists;\r\n    })\r\n    \r\n  }\r\n\r\n  onTaskClick(task: Task) {\r\n    // we want to set the task to completed\r\n    this.taskService.complete(task).subscribe(() => {\r\n      // the task has been set to completed successfully\r\n      console.log(\"Completed successully!\");\r\n      task.completed = !task.completed;\r\n    })\r\n  }\r\n\r\n  onDeleteListClick() {\r\n    this.taskService.deleteList(this.selectedListId).subscribe((res: any) => {\r\n      this.router.navigate(['/lists']);\r\n      console.log(res);\r\n    })\r\n  }\r\n\r\n  onDeleteTaskClick(id: string) {\r\n    this.taskService.deleteTask(this.selectedListId, id).subscribe((res: any) => {\r\n      this.tasks = this.tasks.filter(val => val._id !== id);\r\n      console.log(res);\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"centered-content\">\r\n  <div class=\"task-manager-container\">\r\n\r\n    <div class=\"sidebar has-background-white\">\r\n      <h1 class=\"title has-text-primary\">\r\n        Lists\r\n      </h1>\r\n\r\n      <div class=\"list-menu\">\r\n        <a class=\"list-menu-item\" *ngFor=\"let list of lists\" [routerLink]=\"['/lists', list._id]\" routerLinkActive=\"is-active\">\r\n          <p>{{ list.title }}</p>\r\n        </a>\r\n\r\n      </div>\r\n\r\n      <button class=\"button is-primary has-text-white\" routerLink=\"/new-list\">+ New List</button>\r\n\r\n    </div>\r\n\r\n    <div class=\"task-list-container has-background-light\">\r\n      <div *ngIf=\"tasks\">\r\n        <div class=\"top-bar\">\r\n          <h1 class=\"title has-text-primary\">\r\n            Tasks\r\n          </h1>\r\n          <div class=\"dropdown is-hoverable is-right\">\r\n            <div class=\"dropdown-trigger\">\r\n              <button class=\"button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu4\">\r\n                <span class=\"icon is-small\">\r\n                  <i class=\"fas fa-cog\" aria-hidden=\"true\"></i>\r\n                </span>\r\n              </button>\r\n            </div>\r\n            <div class=\"dropdown-menu\" id=\"dropdown-menu4\" role=\"menu\">\r\n              <div class=\"dropdown-content\">\r\n                <a [routerLink]=\"['/edit-list', selectedListId]\" class=\"dropdown-item\">\r\n                  Edit\r\n                </a>\r\n                <a (click)=\"onDeleteListClick()\" class=\"dropdown-item has-text-danger\">\r\n                  Delete\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Task Elements -->\r\n        <div class=\"task\" *ngFor=\"let task of tasks\" (click)=\"onTaskClick(task)\" [ngClass]=\"{ 'completed': task.completed }\">\r\n          <div class=\"task-text\">\r\n            <p>{{ task.title }}</p>\r\n          </div>\r\n          <div class=\"task-buttons\">\r\n\r\n            <button class=\"button\" [routerLink]=\"['/lists', selectedListId, 'edit-task', task._id]\">\r\n              <div class=\"icon\">\r\n                <i class=\"fas fa-edit\"></i>\r\n              </div>\r\n            </button>\r\n\r\n            <button class=\"button is-danger\" (click)=\"onDeleteTaskClick(task._id)\" style=\"margin-left: 10px;\">\r\n              <div class=\"icon\">\r\n                <i class=\"fas fa-trash\"></i>\r\n              </div>\r\n            </button>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <h3 class=\"empty-state-text\" *ngIf=\"tasks.length === 0\">There are no tasks here! Click the add button to create\r\n          a new task.</h3>\r\n\r\n        <button routerLink=\"./new-task\" class=\"circle-add-button button is-primary\">\r\n          <img src=\"../../../assets/plus-icon.svg\" class=\"has-text-white\">\r\n        </button>\r\n      </div>\r\n\r\n      <div *ngIf=\"!tasks\">\r\n        <h3 class=\"empty-state-text\">Please select a list from the sidebar</h3>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from 'src/app/auth.service';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.scss']\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onLoginButtonClicked(email: string, password: string) {\r\n    this.authService.login(email, password).subscribe((res: HttpResponse<any>) => {\r\n      if (res.status === 200) {\r\n        // we have logged in successfully\r\n        this.router.navigate(['/lists']);\r\n      }\r\n      console.log(res);\r\n      \r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"centered-content\">\r\n  <div class=\"white-box\">\r\n\r\n    <h1 class=\"title has-text-primary\">Login</h1>\r\n    \r\n    <div class=\"field\">\r\n      <p class=\"control has-icons-left has-icons-right\">\r\n        <input #emailInput class=\"input has-background-light\" type=\"email\" placeholder=\"Email\">\r\n        <span class=\"icon is-small is-left\">\r\n          <i class=\"fas fa-envelope\"></i>\r\n        </span>\r\n      </p>\r\n    </div>\r\n    <div class=\"field\">\r\n      <p class=\"control has-icons-left\">\r\n        <input #pwInput class=\"input has-background-light\" type=\"password\" placeholder=\"Password\">\r\n        <span class=\"icon is-small is-left\">\r\n          <i class=\"fas fa-lock\"></i>\r\n        </span>\r\n      </p>\r\n    </div>\r\n    <div class=\"field\" style=\"display: flex; justify-content: flex-end;\">\r\n      <p class=\"control\">\r\n        <button class=\"button is-success has-text-white\" (click)=\"onLoginButtonClicked(emailInput.value, pwInput.value)\">\r\n          Login\r\n        </button>\r\n      </p>\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <p class=\"has-text-grey\">Not got an account? <a routerLink=\"/signup\">Sign up</a> now!</p>\r\n\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { TaskService } from 'src/app/task.service';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { Task } from 'src/app/models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-new-task',\r\n  templateUrl: './new-task.component.html',\r\n  styleUrls: ['./new-task.component.scss']\r\n})\r\nexport class NewTaskComponent implements OnInit {\r\n\r\n  constructor(private taskService: TaskService, private route: ActivatedRoute, private router: Router) { }\r\n\r\n  listId: string;\r\n  \r\n  ngOnInit() {\r\n    this.route.params.subscribe(\r\n      (params: Params) => {\r\n        this.listId = params['listId'];\r\n      }\r\n    )\r\n  }\r\n\r\n  createTask(title: string) {\r\n    this.taskService.createTask(title, this.listId).subscribe((newTask: Task) => {\r\n      this.router.navigate(['../'], { relativeTo: this.route });\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"centered-content\">\r\n  <div class=\"modal-box\">\r\n    <h1 class=\"title\">\r\n      Create a new task\r\n    </h1>\r\n\r\n    <input #taskTitleInput class=\"input has-background-light is-medium\" type=\"text\" placeholder=\"Enter task name...\">\r\n    <br><br>\r\n    <div class=\"buttons is-right\">\r\n      <button class=\"button is-medium\" routerLink=\"/\">Cancel</button>\r\n      <button class=\"button is-primary has-text-white is-medium\" (click)=\"createTask(taskTitleInput.value)\">Create</button>\r\n    </div>\r\n\r\n    \r\n  </div>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\r\nimport { WebRequestService } from './web-request.service';\r\nimport { Task } from './models/task.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n\r\n  constructor(private webReqService: WebRequestService) { }\r\n\r\n\r\n  getLists() {\r\n    return this.webReqService.get('lists');\r\n  }\r\n\r\n  createList(title: string) {\r\n    // We want to send a web request to create a list\r\n    return this.webReqService.post('lists', { title });\r\n  }\r\n\r\n  updateList(id: string, title: string) {\r\n    // We want to send a web request to update a list\r\n    return this.webReqService.patch(`lists/${id}`, { title });\r\n  }\r\n\r\n  updateTask(listId: string, taskId: string, title: string) {\r\n    // We want to send a web request to update a list\r\n    return this.webReqService.patch(`lists/${listId}/tasks/${taskId}`, { title });\r\n  }\r\n\r\n  deleteTask(listId: string, taskId: string) {\r\n    return this.webReqService.delete(`lists/${listId}/tasks/${taskId}`);\r\n  }\r\n\r\n  deleteList(id: string) {\r\n    return this.webReqService.delete(`lists/${id}`);\r\n  }\r\n\r\n  getTasks(listId: string) {\r\n    return this.webReqService.get(`lists/${listId}/tasks`);\r\n  }\r\n\r\n  // getTask(listId: string, taskId: string) {\r\n  //   return this.webReqService.get(`lists/${listId}/getTask/${taskId}`);\r\n  // }\r\n\r\n  createTask(title: string, listId: string) {\r\n    // We want to send a web request to create a task\r\n    return this.webReqService.post(`lists/${listId}/tasks`, { title });\r\n  }\r\n\r\n  complete(task: Task) {\r\n    return this.webReqService.patch(`lists/${task._listId}/tasks/${task._id}`, {\r\n      completed: !task.completed\r\n    });\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { TaskService } from 'src/app/task.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-list',\r\n  templateUrl: './edit-list.component.html',\r\n  styleUrls: ['./edit-list.component.scss']\r\n})\r\nexport class EditListComponent implements OnInit {\r\n\r\n  constructor(private route: ActivatedRoute, private taskService: TaskService, private router: Router) { }\r\n\r\n  listId: string;\r\n\r\n  \r\n  ngOnInit() {\r\n    this.route.params.subscribe(\r\n      (params: Params) => {\r\n        this.listId = params.listId;\r\n        console.log(params.listId);\r\n      }\r\n    )\r\n  }\r\n\r\n  updateList(title: string) {\r\n    this.taskService.updateList(this.listId, title).subscribe(() => {\r\n      this.router.navigate(['/lists', this.listId]);\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"centered-content\">\r\n    <div class=\"modal-box\">\r\n      <h1 class=\"title\">\r\n        Edit list\r\n      </h1>\r\n  \r\n      <input #listTitleInput class=\"input has-background-light is-medium\" type=\"text\" placeholder=\"Enter list name...\">\r\n      <br><br>\r\n      <div class=\"buttons is-right\">\r\n        <button class=\"button is-medium\" routerLink=\"/\">Cancel</button>\r\n        <button class=\"button is-primary has-text-white is-medium\" (click)=\"updateList(listTitleInput.value)\">Save</button>\r\n      </div>\r\n  \r\n      \r\n    </div>\r\n  </div>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'frontend';\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { AuthService } from 'src/app/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-signup-page',\r\n  templateUrl: './signup-page.component.html',\r\n  styleUrls: ['./signup-page.component.scss']\r\n})\r\nexport class SignupPageComponent implements OnInit {\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSignupButtonClicked(email: string, password: string) {\r\n    this.authService.signup(email, password).subscribe((res: HttpResponse<any>) => {\r\n      console.log(res);\r\n      this.router.navigate(['/lists']);\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"centered-content\">\r\n  <div class=\"white-box\">\r\n\r\n    <h1 class=\"title has-text-primary\">Sign up</h1>\r\n    \r\n    <div class=\"field\">\r\n      <p class=\"control has-icons-left has-icons-right\">\r\n        <input #emailInput class=\"input has-background-light\" type=\"email\" placeholder=\"Email\">\r\n        <span class=\"icon is-small is-left\">\r\n          <i class=\"fas fa-envelope\"></i>\r\n        </span>\r\n      </p>\r\n    </div>\r\n    <div class=\"field\">\r\n      <p class=\"control has-icons-left\">\r\n        <input #pwInput class=\"input has-background-light\" type=\"password\" placeholder=\"Password\">\r\n        <span class=\"icon is-small is-left\">\r\n          <i class=\"fas fa-lock\"></i>\r\n        </span>\r\n      </p>\r\n    </div>\r\n    <div class=\"field\" style=\"display: flex; justify-content: flex-end;\">\r\n      <p class=\"control\">\r\n        <button class=\"button is-success has-text-white\" (click)=\"onSignupButtonClicked(emailInput.value, pwInput.value)\">\r\n          Sign up\r\n        </button>\r\n      </p>\r\n    </div>\r\n    <br>\r\n\r\n    <p class=\"has-text-grey\">Already got an account? <a routerLink=\"/login\">Login</a> now!</p>\r\n\r\n  </div>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { TaskViewComponent } from './pages/task-view/task-view.component';\r\nimport { NewListComponent } from './pages/new-list/new-list.component';\r\nimport { NewTaskComponent } from './pages/new-task/new-task.component';\r\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\r\nimport { SignupPageComponent } from './pages/signup-page/signup-page.component';\r\nimport { EditListComponent } from './pages/edit-list/edit-list.component';\r\nimport { EditTaskComponent } from './pages/edit-task/edit-task.component';\r\n\r\nimport { WebReqInterceptor } from './web-req.interceptor';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    TaskViewComponent,\r\n    NewListComponent,\r\n    NewTaskComponent,\r\n    LoginPageComponent,\r\n    SignupPageComponent,\r\n    EditListComponent,\r\n    EditTaskComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: WebReqInterceptor, multi: true }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { WebRequestService } from './web-request.service';\r\nimport { Router } from '@angular/router';\r\nimport { shareReplay, tap } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(private webService: WebRequestService, private router: Router, private http: HttpClient) { }\r\n\r\n  login(email: string, password: string) {\r\n    return this.webService.login(email, password).pipe(\r\n      shareReplay(),\r\n      tap((res: HttpResponse<any>) => {\r\n        // the auth tokens will be in the header of this response\r\n        this.setSession(res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\r\n        console.log(\"LOGGED IN!\");\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  signup(email: string, password: string) {\r\n    return this.webService.signup(email, password).pipe(\r\n      shareReplay(),\r\n      tap((res: HttpResponse<any>) => {\r\n        // the auth tokens will be in the header of this response\r\n        this.setSession(res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\r\n        console.log(\"Successfully signed up and now logged in!\");\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n\r\n  logout() {\r\n    this.removeSession();\r\n\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getAccessToken() {\r\n    return localStorage.getItem('x-access-token');\r\n  }\r\n\r\n  getRefreshToken() {\r\n    return localStorage.getItem('x-refresh-token');\r\n  }\r\n\r\n  getUserId() {\r\n    return localStorage.getItem('user-id');\r\n  }\r\n\r\n  setAccessToken(accessToken: string) {\r\n    localStorage.setItem('x-access-token', accessToken)\r\n  }\r\n  \r\n  private setSession(userId: string, accessToken: string, refreshToken: string) {\r\n    localStorage.setItem('user-id', userId);\r\n    localStorage.setItem('x-access-token', accessToken);\r\n    localStorage.setItem('x-refresh-token', refreshToken);\r\n  }\r\n\r\n  private removeSession() {\r\n    localStorage.removeItem('user-id');\r\n    localStorage.removeItem('x-access-token');\r\n    localStorage.removeItem('x-refresh-token');\r\n  }\r\n\r\n  getNewAccessToken() {\r\n    return this.http.get(`${this.webService.ROOT_URL}/users/me/access-token`, {\r\n      headers: {\r\n        'x-refresh-token': this.getRefreshToken(),\r\n        '_id': this.getUserId()\r\n      },\r\n      observe: 'response'\r\n    }).pipe(\r\n      tap((res: HttpResponse<any>) => {\r\n        this.setAccessToken(res.headers.get('x-access-token'));\r\n      })\r\n    )\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError, empty, Subject } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { catchError, tap, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebReqInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n  refreshingAccessToken: boolean;\r\n\r\n  accessTokenRefreshed: Subject<any> = new Subject();\r\n\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<any> {\r\n    // Handle the request\r\n    request = this.addAuthHeader(request);\r\n\r\n    // call next() and handle the response\r\n    return next.handle(request).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.log(error);\r\n\r\n        if (error.status === 401) {\r\n          // 401 error so we are unauthorized\r\n\r\n          // refresh the access token\r\n          return this.refreshAccessToken()\r\n            .pipe(\r\n              switchMap(() => {\r\n                request = this.addAuthHeader(request);\r\n                return next.handle(request);\r\n              }),\r\n              catchError((err: any) => {\r\n                console.log(err);\r\n                this.authService.logout();\r\n                return empty();\r\n              })\r\n            )\r\n        }\r\n\r\n        return throwError(error);\r\n      })\r\n    )\r\n  }\r\n\r\n  refreshAccessToken() {\r\n    if (this.refreshingAccessToken) {\r\n      return new Observable(observer => {\r\n        this.accessTokenRefreshed.subscribe(() => {\r\n          // this code will run when the access token has been refreshed\r\n          observer.next();\r\n          observer.complete();\r\n        })\r\n      })\r\n    } else {\r\n      this.refreshingAccessToken = true;\r\n      // we want to call a method in the auth service to send a request to refresh the access token\r\n      return this.authService.getNewAccessToken().pipe(\r\n        tap(() => {\r\n          console.log(\"Access Token Refreshed!\");\r\n          this.refreshingAccessToken = false;\r\n          this.accessTokenRefreshed.next();\r\n        })\r\n      )\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  addAuthHeader(request: HttpRequest<any>) {\r\n    // get the access token\r\n    const token = this.authService.getAccessToken();\r\n\r\n    if (token) {\r\n      // append the access token to the request header\r\n      return request.clone({\r\n        setHeaders: {\r\n          'x-access-token': token\r\n        }\r\n      })\r\n    }\r\n    return request;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebRequestService {\r\n\r\n  readonly ROOT_URL;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.ROOT_URL = '';\r\n  }\r\n\r\n  get(uri: string) {\r\n    return this.http.get(`${uri}`);\r\n  }\r\n\r\n  post(uri: string, payload: Object) {\r\n    return this.http.post(`${uri}`, payload);\r\n  }\r\n\r\n  patch(uri: string, payload: Object) {\r\n    return this.http.patch(`${uri}`, payload);\r\n  }\r\n\r\n  delete(uri: string) {\r\n    return this.http.delete(`${uri}`);\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    return this.http.post(`users/login`, {\r\n      email,\r\n      password\r\n    }, {\r\n        observe: 'response'\r\n      });\r\n  }\r\n\r\n  signup(email: string, password: string) {\r\n    return this.http.post(`users`, {\r\n      email,\r\n      password\r\n    }, {\r\n        observe: 'response'\r\n      });\r\n  }\r\n\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Params, ActivatedRoute, Router } from '@angular/router';\r\nimport { TaskService } from 'src/app/task.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-task',\r\n  templateUrl: './edit-task.component.html',\r\n  styleUrls: ['./edit-task.component.scss']\r\n})\r\nexport class EditTaskComponent implements OnInit {\r\n\r\n  constructor(private route: ActivatedRoute, private taskService: TaskService, private router: Router) { }\r\n\r\n  taskId: string;\r\n  listId: string;\r\n\r\n  \r\n  ngOnInit() {\r\n    this.route.params.subscribe(\r\n      (params: Params) => {\r\n        this.taskId = params.taskId;\r\n        this.listId = params.listId;\r\n      }\r\n    )\r\n  }\r\n\r\n  updateTask(title: string) {\r\n    this.taskService.updateTask(this.listId, this.taskId, title).subscribe(() => {\r\n      this.router.navigate(['/lists', this.listId]);\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"centered-content\">\r\n    <div class=\"modal-box\">\r\n      <h1 class=\"title\">\r\n        Edit task\r\n      </h1>\r\n  \r\n      <input #taskTitleInput class=\"input has-background-light is-medium\" type=\"text\" placeholder=\"Enter task name...\">\r\n      <br><br>\r\n      <div class=\"buttons is-right\">\r\n        <button class=\"button is-medium\" routerLink=\"/\">Cancel</button>\r\n        <button class=\"button is-primary has-text-white is-medium\" (click)=\"updateTask(taskTitleInput.value)\">Save</button>\r\n      </div>\r\n    </div>\r\n  </div>","import { Component, OnInit } from '@angular/core';\r\nimport { TaskService } from 'src/app/task.service';\r\nimport { Router } from '@angular/router';\r\nimport { List } from 'src/app/models/list.model';\r\n\r\n@Component({\r\n  selector: 'app-new-list',\r\n  templateUrl: './new-list.component.html',\r\n  styleUrls: ['./new-list.component.scss']\r\n})\r\nexport class NewListComponent implements OnInit {\r\n\r\n  constructor(private taskService: TaskService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  createList(title: string) {\r\n    this.taskService.createList(title).subscribe((list: List) => {\r\n      console.log(list);\r\n      // Now we navigate to /lists/task._id\r\n      this.router.navigate([ '/lists', list._id ]); \r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"centered-content\">\r\n  <div class=\"modal-box\">\r\n    <h1 class=\"title\">\r\n      Create a new list\r\n    </h1>\r\n\r\n    <input #listTitleInput class=\"input has-background-light is-medium\" type=\"text\" placeholder=\"Enter list name...\">\r\n    <br><br>\r\n    <div class=\"buttons is-right\">\r\n      <button class=\"button is-medium\" routerLink=\"/\">Cancel</button>\r\n      <button class=\"button is-primary has-text-white is-medium\" (click)=\"createList(listTitleInput.value)\">Create</button>\r\n    </div>\r\n\r\n    \r\n  </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TaskViewComponent } from './pages/task-view/task-view.component';\r\nimport { NewListComponent } from './pages/new-list/new-list.component';\r\nimport { NewTaskComponent } from './pages/new-task/new-task.component';\r\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\r\nimport { SignupPageComponent } from './pages/signup-page/signup-page.component';\r\nimport { EditListComponent } from './pages/edit-list/edit-list.component';\r\nimport { EditTaskComponent } from './pages/edit-task/edit-task.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/lists', pathMatch: 'full' },\r\n  { path: 'new-list', component: NewListComponent },\r\n  { path: 'edit-list/:listId', component: EditListComponent },\r\n  { path: 'login', component: LoginPageComponent },\r\n  { path: 'signup', component: SignupPageComponent },\r\n  { path: 'lists', component: TaskViewComponent },\r\n  { path: 'lists/:listId', component: TaskViewComponent },\r\n  { path: 'lists/:listId/new-task', component: NewTaskComponent },\r\n  { path: 'lists/:listId/edit-task/:taskId', component: EditTaskComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}